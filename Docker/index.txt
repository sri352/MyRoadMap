Docker engine or Docker daemon

docker clients connects to the docker daemon

docker daemon does the heavy lifting of the container processes

images, containers


• A native Linux container format that Docker calls libcontainer .
• Linux kernel namespaces, which provide isolation for filesystems, processes,
and networks.
• Filesystem isolation: each container is its own root filesystem.
• Process isolation: each container runs in its own process environment.
• Network isolation: separate virtual interfaces and IP addressing between
containers.
• Resource isolation and grouping: resources like CPU and memory are allo-
cated individually to each Docker container using the cgroups, or control
groups, kernel feature.
• Copy-on-write: filesystems are created with copy-on-write, meaning they
are layered and fast and require limited disk usage.
• Logging: STDOUT , STDERR and STDIN from the container are collected, logged,
and available for analysis or trouble-shooting.
• Interactive shell: You can create a pseudo-tty and attach to STDIN to provide
an interactive shell to your container

// what docker uses internally the concepts behind what makes docker docker.


Installing docker from https://docs.docker.com/engine/install/ubuntu/

docker run hello-world

docker ps -a // All the containers even the stopped ones

docker ps -l // last ran container

docker ps // list all the running containers

docker run -i -t ubuntu /bin/bash // -i keeps the STDIN open from the container //-t tells docker to assign a pseudo-tty to the container we are about to create

docker run --name bob_the_container -it ubuntu // give a name to the container.

if you give the existing container name to other 
docker: Error response from daemon: Conflict. The container name "/bob_the_container" is already in use by container "606d55f15c180f9431847d3c0706e36bc1fd909d9180b6b97dc73a0ec9ba0990". You have to remove (or rename) that container to be able to reuse that name.
See 'docker run --help'.

even if the container is stopped you cant assign the same name to a different container.

once you exit the command shell (exit) end of the command the container is stopped.

you can restart the container with docker start <container name or container id>

if you start docker run ubuntu without any -it option then the container is started in the background you can attack to the container using docker attach <container name or id>


these are mostly interactive containers. creating daemonized containers

docker run --name daemon_bob -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"

this will start a daemon container in the background;

you can look at the logs of the container using docker logs <container id>

tail the logs using docker logs -f <container id or name>

docker logs --tail 0 -ft  <container id or name>

docker top <container id>

UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                12455               12436               0                   12:37               ?                   00:00:00            /bin/sh -c while true; do echo hello world; sleep 1; done
root                12693               12455               0                   12:39               ?                   00:00:00            sleep 1



docker stats <container 1> <container 2>

CONTAINER ID   NAME                   CPU %     MEM USAGE / LIMIT     MEM %     NET I/O      BLOCK I/O   PIDS
d8ff6cceb2b0   daemon_bob_container   0.25%     2.102MiB / 15.54GiB   0.01%     3.6kB / 0B   0B / 0B     2

docker exec -it daemon_bob_container /bin/bash

docker inspect <container id or name>

docker rm <continer name or id>

docker rm -f <container name or id > // if the container is still running; // f if for force.

docker ps -a -q lists all the containers with only the container id's in the output. // q is for quiet





