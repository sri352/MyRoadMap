
#Events and http context are the two base contexts which almost every nginx conf has and should be included
#We can leave the events context empty

#You can check if the syntax of the nginx conf is correct or wrong by running nginx -t. You would get the output as below.

# nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
# nginx: configuration file /etc/nginx/nginx.conf test is successful

#william-voyek.vscode-nginx   VsCode extension for syntax highlighting


events{}

#each virtual host is a server context

http{


    #types is used by nginx to categorize to what type the file should be sent. If this is empty even the css files would be sent as normal text files
    # types{
    #     text/html html;
    #     text/css css
    # }
    #because this is a general case and not someting everyone should do there is a mime.types file which is generally added in the /etc/nginx/ folder.
    #The mime folder can directly be added using include

    include mime.types;

    #adding the mime.types file in this folder for reference



    server {

        #listen can be left empty. by default nginx takes http as 80
        listen 80; 
        #server_name is nothing but the domain name or the subdomain name that is going to be used for this. Ip can also be given. * can also be given
        server_name localhost;
        #root path from which nginx will be serving requests
        root  /etc/mysite/;

        ###################################################################################################################################################
        
        ###################################################################################################################################################
        
        ###################################################################################################################################################

        #the location take the URI parameter to match. Will return hello World String for localhost/greet.
        #This is the prefix match anything stariting with /greet will get the following response including /greeting /greetinglololo etc 
        location /greet{
            return 200 "hello World";
        }

        #make sure there is a space between location and =
        #for exact matching
        location = /greet {
           return 200 'Hello world greeting';
        }

        #for regex matching
        location ~ /gre* {
            return 200 'hello world regular expression';
        }

        #this is the preferential prefix same as prefix but more important than regex match
        location ^~ /greet2 {
            return 200 "Hello world form preferential prefix";
        }

        #even though what ever order they are written the priority is as follows
        #exact > preferential prefix > regex > prefix match however the order you write them
        ###################################################################################################################################################
        
        ###################################################################################################################################################
        
        ###################################################################################################################################################

        #variables in nginx
        #same like a programming lang even nginx has some variables stored which can be access by a $ you can return them as below to check
        #host is the host name
        #url is inspect in this case
        #args is the query params
        #arg_name will return the name query param if it consists
        location /inspect {
            return 200 "$host\n$uri\n$args\nName :$arg_name"
        }

        #redirects if 30* is given in the return it will redirect from the root index given in the starting 
        location /logo {
            return 307 /thumb.png;
        }

        #rewrite takes a regex converts it into a new request and the new request will again start from top of the file
        #in a sense nginx considers it as a new request
        
        rewrite ^/user/\w+ /rewriter;
        rewrite ^/employee/(\w+) /employeeRewriter/$1 last;

        #giving last in the end makes sure that the uri doesnt get rewritten again;

        location /rewriter {
            return 200 "Hello this is the rewritten output";
        }

        location /employeeRewriter {
            return 200 "$args\n$uri";
        }
        #One of the main difference in redirect and rewrites is in redirects the page url will change to the redirected path
        #but in rewrites the url stays the same rather the chage is done internally

        #there are mostly two types of logs in ngnix access.log and error.log where we specifed the paths to them during configuration

        #if you want to have a special logs for secure api or something like that
        location /secure {
            #this will automatically create the required file and forward the logs to that file.
            #it no longer exits in the normal access log.
            #https://docs.nginx.com/nginx/admin-guide/monitoring/logging/ link to the logging article
            access_log /var/log/nginx/secure.access.log;
            return 200 "This is a secure url";
        }
    }
}